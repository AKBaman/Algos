#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX_SIZE 100
#define INF INT_MAX

// Structure to represent an edge
struct Edge {
    int source, destination, weight;
};

// Function to perform Bellman-Ford algorithm
void bellmanFord(struct Edge edge[], int vertices, int edges, int source) {
    int distance[MAX_SIZE];

    // Step 1: Initialize distances
    for (int i = 0; i < vertices; i++) {
        distance[i] = INF;
    }
    distance[source] = 0;

    // Step 2: Relax all edges |V|-1 times
    for (int i = 0; i < vertices - 1; i++) {
        for (int j = 0; j < edges; j++) {
            int u = edge[j].source;
            int v = edge[j].destination;
            int w = edge[j].weight;
            if (distance[u] != INF && distance[u] + w < distance[v]) {
                distance[v] = distance[u] + w;
            }
        }
    }

    // Step 3: Check for negative weight cycles
    for (int i = 0; i < edges; i++) {
        int u = edge[i].source;
        int v = edge[i].destination;
        int w = edge[i].weight;
        if (distance[u] != INF && distance[u] + w < distance[v]) {
            printf("Graph contains negative weight cycle\n");
            return;
        }
    }

    // Step 4: Print the shortest distances
    printf("Vertex   Distance from Source\n");
    for (int i = 0; i < vertices; i++) {
        printf("%d \t\t %d\n", i, distance[i]);
    }
}

int main() {
    int vertices, edges, source;
    printf("Enter the number of vertices: ");
    scanf("%d", &vertices);
    printf("Enter the number of edges: ");
    scanf("%d", &edges);

    struct Edge edge[MAX_SIZE];
    printf("Enter the source, destination, and weight for each edge:\n");
    for (int i = 0; i < edges; i++) {
        scanf("%d %d %d", &edge[i].source, &edge[i].destination, &edge[i].weight);
    }

    printf("Enter the source vertex: ");
    scanf("%d", &source);

    bellmanFord(edge, vertices, edges, source);

    return 0;
}
