#include <stdio.h>
#include <stdbool.h>

#define MAX_SIZE 100

// Queue implementation
int queue[MAX_SIZE];
int front = -1, rear = -1;

void enqueue(int vertex) {
    if (rear == MAX_SIZE - 1) {
        printf("Queue is full.\n");
        return;
    }
    if (front == -1)
        front = 0;
    rear++;
    queue[rear] = vertex;
}

int dequeue() {
    if (front == -1 || front > rear) {
        printf("Queue is empty.\n");
        return -1;
    }
    int vertex = queue[front];
    front++;
    return vertex;
}

bool isEmpty() {
    return (front == -1 || front > rear);
}

// BFS function
void BFS(int graph[MAX_SIZE][MAX_SIZE], int vertices, int start) {
    int visited[MAX_SIZE] = {0};

    enqueue(start);
    visited[start] = 1;

    while (!isEmpty()) {
        int u = dequeue();
        printf("%d ", u);

        for (int i = 0; i < vertices; i++) {
            if (graph[u][i] == 1 && !visited[i]) {
                enqueue(i);
                visited[i] = 1;
            }
        }
    }
}

int main() {
    int vertices;
    printf("Enter the number of vertices: ");
    scanf("%d", &vertices);

    int graph[MAX_SIZE][MAX_SIZE];
    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < vertices; i++) {
        for (int j = 0; j < vertices; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    int startVertex;
    printf("Enter the starting vertex for BFS: ");
    scanf("%d", &startVertex);

    printf("BFS Traversal: ");
    BFS(graph, vertices, startVertex);
    printf("\n");

    return 0;
}
