#include <stdio.h>
#include <stdlib.h>

// Function to swap two elements
void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Function to perform merge operation in Merge Sort
void merge(int arr[], int l, int m, int r, int *swaps) {
    int n1 = m - l + 1;
    int n2 = r - m;

    // Create temporary arrays
    int L[n1], R[n2];

    // Copy data to temporary arrays L[] and R[]
    for (int i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    // Merge the temporary arrays back into arr[l..r]
    int i = 0, j = 0, k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
            (*swaps)++;
        }
        k++;
    }

    // Copy the remaining elements of L[], if any
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    // Copy the remaining elements of R[], if any
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

// Function to perform merge sort
void mergeSort(int arr[], int l, int r, int *swaps) {
    if (l < r) {
        // Same as (l+r)/2, but avoids overflow for large l and r
        int m = l + (r - l) / 2;

        // Sort first and second halves
        mergeSort(arr, l, m, swaps);
        mergeSort(arr, m + 1, r, swaps);

        // Merge the sorted halves
        merge(arr, l, m, r, swaps);
    }
}

// Function to partition the array and return the pivot index
int partition(int arr[], int low, int high, int *swaps) {
    int pivot = arr[high];
    int i = low - 1;

    for (int j = low; j < high; j++) {
        if (arr[j] <= pivot) {
            i++;
            swap(&arr[i], &arr[j]);
            (*swaps)++;
        }
    }
    swap(&arr[i + 1], &arr[high]);
    (*swaps)++;
    return (i + 1);
}

// Function to perform quick sort
void quickSort(int arr[], int low, int high, int *swaps) {
    if (low < high) {
        int pi = partition(arr, low, high, swaps);

        quickSort(arr, low, pi - 1, swaps);
        quickSort(arr, pi + 1, high, swaps);
    }
}

// Function to perform heapify operation in Heap Sort
void heapify(int arr[], int n, int i, int *swaps) {
    int largest = i; // Initialize largest as root
    int l = 2 * i + 1; // left = 2*i + 1
    int r = 2 * i + 2; // right = 2*i + 2

    // If left child is larger than root
    if (l < n && arr[l] > arr[largest])
        largest = l;

    // If right child is larger than largest so far
    if (r < n && arr[r] > arr[largest])
        largest = r;

    // If largest is not root
    if (largest != i) {
        swap(&arr[i], &arr[largest]);
        (*swaps)++;
        // Recursively heapify the affected sub-tree
        heapify(arr, n, largest, swaps);
    }
}

// Function to perform heap sort
void heapSort(int arr[], int n, int *swaps) {
    // Build heap (rearrange array)
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i, swaps);

    // One by one extract an element from heap
    for (int i = n - 1; i > 0; i--) {
        // Move current root to end
        swap(&arr[0], &arr[i]);
        (*swaps)++;
        // call max heapify on the reduced heap
        heapify(arr, i, 0, swaps);
    }
}

int main() {
    FILE *file = fopen("unsorted_array.txt", "r");
    if (file == NULL) {
        printf("Error opening file.\n");
        return 1;
    }

    int unsorted_array[1000];
    for (int i = 0; i < 1000; i++) {
        fscanf(file, "%d", &unsorted_array[i]);
    }
    fclose(file);

    int mergesort_swaps = 0;
    int quicksort_swaps = 0;
    int heapsort_swaps = 0;

    // Perform Merge Sort
    int merge_sorted_array[1000];
    for (int i = 0; i < 1000; i++) {
        merge_sorted_array[i] = unsorted_array[i];
    }
    mergeSort(merge_sorted_array, 0, 999, &mergesort_swaps);

    // Perform Quick Sort
    int quick_sorted_array[1000];
    for (int i = 0; i < 1000; i++) {
        quick_sorted_array[i] = unsorted_array[i];
    }
    quickSort(quick_sorted_array, 0, 999, &quicksort_swaps);

    // Perform Heap Sort
    int heap_sorted_array[1000];
    for (int i = 0; i < 1000; i++) {
        heap_sorted_array[i] = unsorted_array[i];
    }
    heapSort(heap_sorted_array, 1000, &heapsort_swaps);

    printf("Merge Sort Swaps: %d\n", mergesort_swaps);
    printf("Quick Sort Swaps: %d\n", quicksort_swaps);
    printf("Heap Sort Swaps: %d\n", heapsort_swaps);

    return 0;
}
